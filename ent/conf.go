// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/supersupersimple/comment/ent/conf"
)

// Conf is the model entity for the Conf schema.
type Conf struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// AllowOrigins holds the value of the "allow_origins" field.
	AllowOrigins []string `json:"allow_origins,omitempty"`
	// CookieSecret holds the value of the "cookie_secret" field.
	CookieSecret string `json:"cookie_secret,omitempty"`
	// LimitPerBatch holds the value of the "limit_per_batch" field.
	LimitPerBatch int `json:"limit_per_batch,omitempty"`
	// MaxLoopDepth holds the value of the "max_loop_depth" field.
	MaxLoopDepth int `json:"max_loop_depth,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// TgBotURL holds the value of the "tg_bot_url" field.
	TgBotURL string `json:"tg_bot_url,omitempty"`
	// RateLimit holds the value of the "rate_limit" field.
	RateLimit    int `json:"rate_limit,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Conf) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case conf.FieldAllowOrigins:
			values[i] = new([]byte)
		case conf.FieldID, conf.FieldLimitPerBatch, conf.FieldMaxLoopDepth, conf.FieldRateLimit:
			values[i] = new(sql.NullInt64)
		case conf.FieldPassword, conf.FieldCookieSecret, conf.FieldHost, conf.FieldTgBotURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Conf fields.
func (c *Conf) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case conf.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case conf.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				c.Password = value.String
			}
		case conf.FieldAllowOrigins:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allow_origins", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.AllowOrigins); err != nil {
					return fmt.Errorf("unmarshal field allow_origins: %w", err)
				}
			}
		case conf.FieldCookieSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cookie_secret", values[i])
			} else if value.Valid {
				c.CookieSecret = value.String
			}
		case conf.FieldLimitPerBatch:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field limit_per_batch", values[i])
			} else if value.Valid {
				c.LimitPerBatch = int(value.Int64)
			}
		case conf.FieldMaxLoopDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_loop_depth", values[i])
			} else if value.Valid {
				c.MaxLoopDepth = int(value.Int64)
			}
		case conf.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				c.Host = value.String
			}
		case conf.FieldTgBotURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tg_bot_url", values[i])
			} else if value.Valid {
				c.TgBotURL = value.String
			}
		case conf.FieldRateLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rate_limit", values[i])
			} else if value.Valid {
				c.RateLimit = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Conf.
// This includes values selected through modifiers, order, etc.
func (c *Conf) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Conf.
// Note that you need to call Conf.Unwrap() before calling this method if this Conf
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Conf) Update() *ConfUpdateOne {
	return NewConfClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Conf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Conf) Unwrap() *Conf {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Conf is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Conf) String() string {
	var builder strings.Builder
	builder.WriteString("Conf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("allow_origins=")
	builder.WriteString(fmt.Sprintf("%v", c.AllowOrigins))
	builder.WriteString(", ")
	builder.WriteString("cookie_secret=")
	builder.WriteString(c.CookieSecret)
	builder.WriteString(", ")
	builder.WriteString("limit_per_batch=")
	builder.WriteString(fmt.Sprintf("%v", c.LimitPerBatch))
	builder.WriteString(", ")
	builder.WriteString("max_loop_depth=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxLoopDepth))
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(c.Host)
	builder.WriteString(", ")
	builder.WriteString("tg_bot_url=")
	builder.WriteString(c.TgBotURL)
	builder.WriteString(", ")
	builder.WriteString("rate_limit=")
	builder.WriteString(fmt.Sprintf("%v", c.RateLimit))
	builder.WriteByte(')')
	return builder.String()
}

// Confs is a parsable slice of Conf.
type Confs []*Conf

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/supersupersimple/comment/ent/conf"
	"github.com/supersupersimple/comment/ent/predicate"
)

// ConfUpdate is the builder for updating Conf entities.
type ConfUpdate struct {
	config
	hooks    []Hook
	mutation *ConfMutation
}

// Where appends a list predicates to the ConfUpdate builder.
func (cu *ConfUpdate) Where(ps ...predicate.Conf) *ConfUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetPassword sets the "password" field.
func (cu *ConfUpdate) SetPassword(s string) *ConfUpdate {
	cu.mutation.SetPassword(s)
	return cu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cu *ConfUpdate) SetNillablePassword(s *string) *ConfUpdate {
	if s != nil {
		cu.SetPassword(*s)
	}
	return cu
}

// SetAllowOrigins sets the "allow_origins" field.
func (cu *ConfUpdate) SetAllowOrigins(s []string) *ConfUpdate {
	cu.mutation.SetAllowOrigins(s)
	return cu
}

// AppendAllowOrigins appends s to the "allow_origins" field.
func (cu *ConfUpdate) AppendAllowOrigins(s []string) *ConfUpdate {
	cu.mutation.AppendAllowOrigins(s)
	return cu
}

// SetCookieSecret sets the "cookie_secret" field.
func (cu *ConfUpdate) SetCookieSecret(s string) *ConfUpdate {
	cu.mutation.SetCookieSecret(s)
	return cu
}

// SetNillableCookieSecret sets the "cookie_secret" field if the given value is not nil.
func (cu *ConfUpdate) SetNillableCookieSecret(s *string) *ConfUpdate {
	if s != nil {
		cu.SetCookieSecret(*s)
	}
	return cu
}

// SetLimitPerBatch sets the "limit_per_batch" field.
func (cu *ConfUpdate) SetLimitPerBatch(i int) *ConfUpdate {
	cu.mutation.ResetLimitPerBatch()
	cu.mutation.SetLimitPerBatch(i)
	return cu
}

// SetNillableLimitPerBatch sets the "limit_per_batch" field if the given value is not nil.
func (cu *ConfUpdate) SetNillableLimitPerBatch(i *int) *ConfUpdate {
	if i != nil {
		cu.SetLimitPerBatch(*i)
	}
	return cu
}

// AddLimitPerBatch adds i to the "limit_per_batch" field.
func (cu *ConfUpdate) AddLimitPerBatch(i int) *ConfUpdate {
	cu.mutation.AddLimitPerBatch(i)
	return cu
}

// SetMaxLoopDepth sets the "max_loop_depth" field.
func (cu *ConfUpdate) SetMaxLoopDepth(i int) *ConfUpdate {
	cu.mutation.ResetMaxLoopDepth()
	cu.mutation.SetMaxLoopDepth(i)
	return cu
}

// SetNillableMaxLoopDepth sets the "max_loop_depth" field if the given value is not nil.
func (cu *ConfUpdate) SetNillableMaxLoopDepth(i *int) *ConfUpdate {
	if i != nil {
		cu.SetMaxLoopDepth(*i)
	}
	return cu
}

// AddMaxLoopDepth adds i to the "max_loop_depth" field.
func (cu *ConfUpdate) AddMaxLoopDepth(i int) *ConfUpdate {
	cu.mutation.AddMaxLoopDepth(i)
	return cu
}

// Mutation returns the ConfMutation object of the builder.
func (cu *ConfUpdate) Mutation() *ConfMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConfUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConfUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConfUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConfUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ConfUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(conf.Table, conf.Columns, sqlgraph.NewFieldSpec(conf.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(conf.FieldPassword, field.TypeString, value)
	}
	if value, ok := cu.mutation.AllowOrigins(); ok {
		_spec.SetField(conf.FieldAllowOrigins, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedAllowOrigins(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, conf.FieldAllowOrigins, value)
		})
	}
	if value, ok := cu.mutation.CookieSecret(); ok {
		_spec.SetField(conf.FieldCookieSecret, field.TypeString, value)
	}
	if value, ok := cu.mutation.LimitPerBatch(); ok {
		_spec.SetField(conf.FieldLimitPerBatch, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLimitPerBatch(); ok {
		_spec.AddField(conf.FieldLimitPerBatch, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MaxLoopDepth(); ok {
		_spec.SetField(conf.FieldMaxLoopDepth, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMaxLoopDepth(); ok {
		_spec.AddField(conf.FieldMaxLoopDepth, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConfUpdateOne is the builder for updating a single Conf entity.
type ConfUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfMutation
}

// SetPassword sets the "password" field.
func (cuo *ConfUpdateOne) SetPassword(s string) *ConfUpdateOne {
	cuo.mutation.SetPassword(s)
	return cuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cuo *ConfUpdateOne) SetNillablePassword(s *string) *ConfUpdateOne {
	if s != nil {
		cuo.SetPassword(*s)
	}
	return cuo
}

// SetAllowOrigins sets the "allow_origins" field.
func (cuo *ConfUpdateOne) SetAllowOrigins(s []string) *ConfUpdateOne {
	cuo.mutation.SetAllowOrigins(s)
	return cuo
}

// AppendAllowOrigins appends s to the "allow_origins" field.
func (cuo *ConfUpdateOne) AppendAllowOrigins(s []string) *ConfUpdateOne {
	cuo.mutation.AppendAllowOrigins(s)
	return cuo
}

// SetCookieSecret sets the "cookie_secret" field.
func (cuo *ConfUpdateOne) SetCookieSecret(s string) *ConfUpdateOne {
	cuo.mutation.SetCookieSecret(s)
	return cuo
}

// SetNillableCookieSecret sets the "cookie_secret" field if the given value is not nil.
func (cuo *ConfUpdateOne) SetNillableCookieSecret(s *string) *ConfUpdateOne {
	if s != nil {
		cuo.SetCookieSecret(*s)
	}
	return cuo
}

// SetLimitPerBatch sets the "limit_per_batch" field.
func (cuo *ConfUpdateOne) SetLimitPerBatch(i int) *ConfUpdateOne {
	cuo.mutation.ResetLimitPerBatch()
	cuo.mutation.SetLimitPerBatch(i)
	return cuo
}

// SetNillableLimitPerBatch sets the "limit_per_batch" field if the given value is not nil.
func (cuo *ConfUpdateOne) SetNillableLimitPerBatch(i *int) *ConfUpdateOne {
	if i != nil {
		cuo.SetLimitPerBatch(*i)
	}
	return cuo
}

// AddLimitPerBatch adds i to the "limit_per_batch" field.
func (cuo *ConfUpdateOne) AddLimitPerBatch(i int) *ConfUpdateOne {
	cuo.mutation.AddLimitPerBatch(i)
	return cuo
}

// SetMaxLoopDepth sets the "max_loop_depth" field.
func (cuo *ConfUpdateOne) SetMaxLoopDepth(i int) *ConfUpdateOne {
	cuo.mutation.ResetMaxLoopDepth()
	cuo.mutation.SetMaxLoopDepth(i)
	return cuo
}

// SetNillableMaxLoopDepth sets the "max_loop_depth" field if the given value is not nil.
func (cuo *ConfUpdateOne) SetNillableMaxLoopDepth(i *int) *ConfUpdateOne {
	if i != nil {
		cuo.SetMaxLoopDepth(*i)
	}
	return cuo
}

// AddMaxLoopDepth adds i to the "max_loop_depth" field.
func (cuo *ConfUpdateOne) AddMaxLoopDepth(i int) *ConfUpdateOne {
	cuo.mutation.AddMaxLoopDepth(i)
	return cuo
}

// Mutation returns the ConfMutation object of the builder.
func (cuo *ConfUpdateOne) Mutation() *ConfMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ConfUpdate builder.
func (cuo *ConfUpdateOne) Where(ps ...predicate.Conf) *ConfUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConfUpdateOne) Select(field string, fields ...string) *ConfUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Conf entity.
func (cuo *ConfUpdateOne) Save(ctx context.Context) (*Conf, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConfUpdateOne) SaveX(ctx context.Context) *Conf {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConfUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConfUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ConfUpdateOne) sqlSave(ctx context.Context) (_node *Conf, err error) {
	_spec := sqlgraph.NewUpdateSpec(conf.Table, conf.Columns, sqlgraph.NewFieldSpec(conf.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Conf.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conf.FieldID)
		for _, f := range fields {
			if !conf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(conf.FieldPassword, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AllowOrigins(); ok {
		_spec.SetField(conf.FieldAllowOrigins, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedAllowOrigins(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, conf.FieldAllowOrigins, value)
		})
	}
	if value, ok := cuo.mutation.CookieSecret(); ok {
		_spec.SetField(conf.FieldCookieSecret, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LimitPerBatch(); ok {
		_spec.SetField(conf.FieldLimitPerBatch, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLimitPerBatch(); ok {
		_spec.AddField(conf.FieldLimitPerBatch, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MaxLoopDepth(); ok {
		_spec.SetField(conf.FieldMaxLoopDepth, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMaxLoopDepth(); ok {
		_spec.AddField(conf.FieldMaxLoopDepth, field.TypeInt, value)
	}
	_node = &Conf{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package conf

import (
	"entgo.io/ent/dialect/sql"
	"github.com/supersupersimple/comment/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Conf {
	return predicate.Conf(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Conf {
	return predicate.Conf(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Conf {
	return predicate.Conf(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Conf {
	return predicate.Conf(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Conf {
	return predicate.Conf(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Conf {
	return predicate.Conf(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Conf {
	return predicate.Conf(sql.FieldLTE(FieldID, id))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldPassword, v))
}

// CookieSecret applies equality check predicate on the "cookie_secret" field. It's identical to CookieSecretEQ.
func CookieSecret(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldCookieSecret, v))
}

// LimitPerBatch applies equality check predicate on the "limit_per_batch" field. It's identical to LimitPerBatchEQ.
func LimitPerBatch(v int) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldLimitPerBatch, v))
}

// MaxLoopDepth applies equality check predicate on the "max_loop_depth" field. It's identical to MaxLoopDepthEQ.
func MaxLoopDepth(v int) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldMaxLoopDepth, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldHost, v))
}

// TgBotURL applies equality check predicate on the "tg_bot_url" field. It's identical to TgBotURLEQ.
func TgBotURL(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldTgBotURL, v))
}

// RateLimit applies equality check predicate on the "rate_limit" field. It's identical to RateLimitEQ.
func RateLimit(v int) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldRateLimit, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Conf {
	return predicate.Conf(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Conf {
	return predicate.Conf(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Conf {
	return predicate.Conf(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Conf {
	return predicate.Conf(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Conf {
	return predicate.Conf(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Conf {
	return predicate.Conf(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Conf {
	return predicate.Conf(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Conf {
	return predicate.Conf(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Conf {
	return predicate.Conf(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Conf {
	return predicate.Conf(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Conf {
	return predicate.Conf(sql.FieldContainsFold(FieldPassword, v))
}

// CookieSecretEQ applies the EQ predicate on the "cookie_secret" field.
func CookieSecretEQ(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldCookieSecret, v))
}

// CookieSecretNEQ applies the NEQ predicate on the "cookie_secret" field.
func CookieSecretNEQ(v string) predicate.Conf {
	return predicate.Conf(sql.FieldNEQ(FieldCookieSecret, v))
}

// CookieSecretIn applies the In predicate on the "cookie_secret" field.
func CookieSecretIn(vs ...string) predicate.Conf {
	return predicate.Conf(sql.FieldIn(FieldCookieSecret, vs...))
}

// CookieSecretNotIn applies the NotIn predicate on the "cookie_secret" field.
func CookieSecretNotIn(vs ...string) predicate.Conf {
	return predicate.Conf(sql.FieldNotIn(FieldCookieSecret, vs...))
}

// CookieSecretGT applies the GT predicate on the "cookie_secret" field.
func CookieSecretGT(v string) predicate.Conf {
	return predicate.Conf(sql.FieldGT(FieldCookieSecret, v))
}

// CookieSecretGTE applies the GTE predicate on the "cookie_secret" field.
func CookieSecretGTE(v string) predicate.Conf {
	return predicate.Conf(sql.FieldGTE(FieldCookieSecret, v))
}

// CookieSecretLT applies the LT predicate on the "cookie_secret" field.
func CookieSecretLT(v string) predicate.Conf {
	return predicate.Conf(sql.FieldLT(FieldCookieSecret, v))
}

// CookieSecretLTE applies the LTE predicate on the "cookie_secret" field.
func CookieSecretLTE(v string) predicate.Conf {
	return predicate.Conf(sql.FieldLTE(FieldCookieSecret, v))
}

// CookieSecretContains applies the Contains predicate on the "cookie_secret" field.
func CookieSecretContains(v string) predicate.Conf {
	return predicate.Conf(sql.FieldContains(FieldCookieSecret, v))
}

// CookieSecretHasPrefix applies the HasPrefix predicate on the "cookie_secret" field.
func CookieSecretHasPrefix(v string) predicate.Conf {
	return predicate.Conf(sql.FieldHasPrefix(FieldCookieSecret, v))
}

// CookieSecretHasSuffix applies the HasSuffix predicate on the "cookie_secret" field.
func CookieSecretHasSuffix(v string) predicate.Conf {
	return predicate.Conf(sql.FieldHasSuffix(FieldCookieSecret, v))
}

// CookieSecretEqualFold applies the EqualFold predicate on the "cookie_secret" field.
func CookieSecretEqualFold(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEqualFold(FieldCookieSecret, v))
}

// CookieSecretContainsFold applies the ContainsFold predicate on the "cookie_secret" field.
func CookieSecretContainsFold(v string) predicate.Conf {
	return predicate.Conf(sql.FieldContainsFold(FieldCookieSecret, v))
}

// LimitPerBatchEQ applies the EQ predicate on the "limit_per_batch" field.
func LimitPerBatchEQ(v int) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldLimitPerBatch, v))
}

// LimitPerBatchNEQ applies the NEQ predicate on the "limit_per_batch" field.
func LimitPerBatchNEQ(v int) predicate.Conf {
	return predicate.Conf(sql.FieldNEQ(FieldLimitPerBatch, v))
}

// LimitPerBatchIn applies the In predicate on the "limit_per_batch" field.
func LimitPerBatchIn(vs ...int) predicate.Conf {
	return predicate.Conf(sql.FieldIn(FieldLimitPerBatch, vs...))
}

// LimitPerBatchNotIn applies the NotIn predicate on the "limit_per_batch" field.
func LimitPerBatchNotIn(vs ...int) predicate.Conf {
	return predicate.Conf(sql.FieldNotIn(FieldLimitPerBatch, vs...))
}

// LimitPerBatchGT applies the GT predicate on the "limit_per_batch" field.
func LimitPerBatchGT(v int) predicate.Conf {
	return predicate.Conf(sql.FieldGT(FieldLimitPerBatch, v))
}

// LimitPerBatchGTE applies the GTE predicate on the "limit_per_batch" field.
func LimitPerBatchGTE(v int) predicate.Conf {
	return predicate.Conf(sql.FieldGTE(FieldLimitPerBatch, v))
}

// LimitPerBatchLT applies the LT predicate on the "limit_per_batch" field.
func LimitPerBatchLT(v int) predicate.Conf {
	return predicate.Conf(sql.FieldLT(FieldLimitPerBatch, v))
}

// LimitPerBatchLTE applies the LTE predicate on the "limit_per_batch" field.
func LimitPerBatchLTE(v int) predicate.Conf {
	return predicate.Conf(sql.FieldLTE(FieldLimitPerBatch, v))
}

// MaxLoopDepthEQ applies the EQ predicate on the "max_loop_depth" field.
func MaxLoopDepthEQ(v int) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldMaxLoopDepth, v))
}

// MaxLoopDepthNEQ applies the NEQ predicate on the "max_loop_depth" field.
func MaxLoopDepthNEQ(v int) predicate.Conf {
	return predicate.Conf(sql.FieldNEQ(FieldMaxLoopDepth, v))
}

// MaxLoopDepthIn applies the In predicate on the "max_loop_depth" field.
func MaxLoopDepthIn(vs ...int) predicate.Conf {
	return predicate.Conf(sql.FieldIn(FieldMaxLoopDepth, vs...))
}

// MaxLoopDepthNotIn applies the NotIn predicate on the "max_loop_depth" field.
func MaxLoopDepthNotIn(vs ...int) predicate.Conf {
	return predicate.Conf(sql.FieldNotIn(FieldMaxLoopDepth, vs...))
}

// MaxLoopDepthGT applies the GT predicate on the "max_loop_depth" field.
func MaxLoopDepthGT(v int) predicate.Conf {
	return predicate.Conf(sql.FieldGT(FieldMaxLoopDepth, v))
}

// MaxLoopDepthGTE applies the GTE predicate on the "max_loop_depth" field.
func MaxLoopDepthGTE(v int) predicate.Conf {
	return predicate.Conf(sql.FieldGTE(FieldMaxLoopDepth, v))
}

// MaxLoopDepthLT applies the LT predicate on the "max_loop_depth" field.
func MaxLoopDepthLT(v int) predicate.Conf {
	return predicate.Conf(sql.FieldLT(FieldMaxLoopDepth, v))
}

// MaxLoopDepthLTE applies the LTE predicate on the "max_loop_depth" field.
func MaxLoopDepthLTE(v int) predicate.Conf {
	return predicate.Conf(sql.FieldLTE(FieldMaxLoopDepth, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.Conf {
	return predicate.Conf(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.Conf {
	return predicate.Conf(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.Conf {
	return predicate.Conf(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.Conf {
	return predicate.Conf(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.Conf {
	return predicate.Conf(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.Conf {
	return predicate.Conf(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.Conf {
	return predicate.Conf(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.Conf {
	return predicate.Conf(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.Conf {
	return predicate.Conf(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.Conf {
	return predicate.Conf(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.Conf {
	return predicate.Conf(sql.FieldContainsFold(FieldHost, v))
}

// TgBotURLEQ applies the EQ predicate on the "tg_bot_url" field.
func TgBotURLEQ(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldTgBotURL, v))
}

// TgBotURLNEQ applies the NEQ predicate on the "tg_bot_url" field.
func TgBotURLNEQ(v string) predicate.Conf {
	return predicate.Conf(sql.FieldNEQ(FieldTgBotURL, v))
}

// TgBotURLIn applies the In predicate on the "tg_bot_url" field.
func TgBotURLIn(vs ...string) predicate.Conf {
	return predicate.Conf(sql.FieldIn(FieldTgBotURL, vs...))
}

// TgBotURLNotIn applies the NotIn predicate on the "tg_bot_url" field.
func TgBotURLNotIn(vs ...string) predicate.Conf {
	return predicate.Conf(sql.FieldNotIn(FieldTgBotURL, vs...))
}

// TgBotURLGT applies the GT predicate on the "tg_bot_url" field.
func TgBotURLGT(v string) predicate.Conf {
	return predicate.Conf(sql.FieldGT(FieldTgBotURL, v))
}

// TgBotURLGTE applies the GTE predicate on the "tg_bot_url" field.
func TgBotURLGTE(v string) predicate.Conf {
	return predicate.Conf(sql.FieldGTE(FieldTgBotURL, v))
}

// TgBotURLLT applies the LT predicate on the "tg_bot_url" field.
func TgBotURLLT(v string) predicate.Conf {
	return predicate.Conf(sql.FieldLT(FieldTgBotURL, v))
}

// TgBotURLLTE applies the LTE predicate on the "tg_bot_url" field.
func TgBotURLLTE(v string) predicate.Conf {
	return predicate.Conf(sql.FieldLTE(FieldTgBotURL, v))
}

// TgBotURLContains applies the Contains predicate on the "tg_bot_url" field.
func TgBotURLContains(v string) predicate.Conf {
	return predicate.Conf(sql.FieldContains(FieldTgBotURL, v))
}

// TgBotURLHasPrefix applies the HasPrefix predicate on the "tg_bot_url" field.
func TgBotURLHasPrefix(v string) predicate.Conf {
	return predicate.Conf(sql.FieldHasPrefix(FieldTgBotURL, v))
}

// TgBotURLHasSuffix applies the HasSuffix predicate on the "tg_bot_url" field.
func TgBotURLHasSuffix(v string) predicate.Conf {
	return predicate.Conf(sql.FieldHasSuffix(FieldTgBotURL, v))
}

// TgBotURLEqualFold applies the EqualFold predicate on the "tg_bot_url" field.
func TgBotURLEqualFold(v string) predicate.Conf {
	return predicate.Conf(sql.FieldEqualFold(FieldTgBotURL, v))
}

// TgBotURLContainsFold applies the ContainsFold predicate on the "tg_bot_url" field.
func TgBotURLContainsFold(v string) predicate.Conf {
	return predicate.Conf(sql.FieldContainsFold(FieldTgBotURL, v))
}

// RateLimitEQ applies the EQ predicate on the "rate_limit" field.
func RateLimitEQ(v int) predicate.Conf {
	return predicate.Conf(sql.FieldEQ(FieldRateLimit, v))
}

// RateLimitNEQ applies the NEQ predicate on the "rate_limit" field.
func RateLimitNEQ(v int) predicate.Conf {
	return predicate.Conf(sql.FieldNEQ(FieldRateLimit, v))
}

// RateLimitIn applies the In predicate on the "rate_limit" field.
func RateLimitIn(vs ...int) predicate.Conf {
	return predicate.Conf(sql.FieldIn(FieldRateLimit, vs...))
}

// RateLimitNotIn applies the NotIn predicate on the "rate_limit" field.
func RateLimitNotIn(vs ...int) predicate.Conf {
	return predicate.Conf(sql.FieldNotIn(FieldRateLimit, vs...))
}

// RateLimitGT applies the GT predicate on the "rate_limit" field.
func RateLimitGT(v int) predicate.Conf {
	return predicate.Conf(sql.FieldGT(FieldRateLimit, v))
}

// RateLimitGTE applies the GTE predicate on the "rate_limit" field.
func RateLimitGTE(v int) predicate.Conf {
	return predicate.Conf(sql.FieldGTE(FieldRateLimit, v))
}

// RateLimitLT applies the LT predicate on the "rate_limit" field.
func RateLimitLT(v int) predicate.Conf {
	return predicate.Conf(sql.FieldLT(FieldRateLimit, v))
}

// RateLimitLTE applies the LTE predicate on the "rate_limit" field.
func RateLimitLTE(v int) predicate.Conf {
	return predicate.Conf(sql.FieldLTE(FieldRateLimit, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Conf) predicate.Conf {
	return predicate.Conf(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Conf) predicate.Conf {
	return predicate.Conf(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Conf) predicate.Conf {
	return predicate.Conf(sql.NotPredicates(p))
}

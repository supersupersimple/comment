// Code generated by ent, DO NOT EDIT.

package conf

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the conf type in the database.
	Label = "conf"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAllowOrigins holds the string denoting the allow_origins field in the database.
	FieldAllowOrigins = "allow_origins"
	// FieldCookieSecret holds the string denoting the cookie_secret field in the database.
	FieldCookieSecret = "cookie_secret"
	// FieldLimitPerBatch holds the string denoting the limit_per_batch field in the database.
	FieldLimitPerBatch = "limit_per_batch"
	// FieldMaxLoopDepth holds the string denoting the max_loop_depth field in the database.
	FieldMaxLoopDepth = "max_loop_depth"
	// FieldHost holds the string denoting the host field in the database.
	FieldHost = "host"
	// FieldTgBotURL holds the string denoting the tg_bot_url field in the database.
	FieldTgBotURL = "tg_bot_url"
	// FieldRateLimit holds the string denoting the rate_limit field in the database.
	FieldRateLimit = "rate_limit"
	// Table holds the table name of the conf in the database.
	Table = "confs"
)

// Columns holds all SQL columns for conf fields.
var Columns = []string{
	FieldID,
	FieldPassword,
	FieldAllowOrigins,
	FieldCookieSecret,
	FieldLimitPerBatch,
	FieldMaxLoopDepth,
	FieldHost,
	FieldTgBotURL,
	FieldRateLimit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLimitPerBatch holds the default value on creation for the "limit_per_batch" field.
	DefaultLimitPerBatch int
	// DefaultMaxLoopDepth holds the default value on creation for the "max_loop_depth" field.
	DefaultMaxLoopDepth int
	// DefaultHost holds the default value on creation for the "host" field.
	DefaultHost string
	// DefaultTgBotURL holds the default value on creation for the "tg_bot_url" field.
	DefaultTgBotURL string
	// DefaultRateLimit holds the default value on creation for the "rate_limit" field.
	DefaultRateLimit int
)

// OrderOption defines the ordering options for the Conf queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByCookieSecret orders the results by the cookie_secret field.
func ByCookieSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCookieSecret, opts...).ToFunc()
}

// ByLimitPerBatch orders the results by the limit_per_batch field.
func ByLimitPerBatch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLimitPerBatch, opts...).ToFunc()
}

// ByMaxLoopDepth orders the results by the max_loop_depth field.
func ByMaxLoopDepth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxLoopDepth, opts...).ToFunc()
}

// ByHost orders the results by the host field.
func ByHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHost, opts...).ToFunc()
}

// ByTgBotURL orders the results by the tg_bot_url field.
func ByTgBotURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTgBotURL, opts...).ToFunc()
}

// ByRateLimit orders the results by the rate_limit field.
func ByRateLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRateLimit, opts...).ToFunc()
}
